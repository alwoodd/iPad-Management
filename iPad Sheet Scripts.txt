const HTTP_HEADER = makeHTTPHeader(); //Do this only once.
const SERIAL_NUMBER_NAME = "Serial Number";
const DEVICE_ID_NAME = "Device ID";
const DEVICE_NAME_NAME = "Device Name";
const IN_MDM_NAME = "In MDM?";
const FIRST_NAME = "User first name";
const LAST_NAME = "User last name";
const GROUPS_NAME = "Groups";
const DEFAULT_DEVICE_NAME = "iPad";
const ALL_STUDENTS_GROUP = "All Students";

function onOpen(event) {
  createMenus();
}

/**
 * Called when "populateSimplemMDMdata" menu item selected.
 * Iterate the sheet's serial numbers and populate each device's device ID and device name from SimpleMDM.
 * Also add any SimpleMDM iPads not in the sheet.
 */
function populateSimplemMDMdata() {
  const simpleMDMdevices = retrieveIpads();
  const serialToSimpleMDMdataMap = makeSerialToSimpleMDMdataMap(simpleMDMdevices);

  const simpleMDMgroups = retrieveGroups();
  const groupIdToNameMap = makeGroupIdToNameMap(simpleMDMgroups);

  const sheetData = new SheetData();
  const sheetSerialNumbers = sheetData.getRowValuesFor(SERIAL_NUMBER_NAME);
  Logger.log(`${sheetSerialNumbers.length} data rows found in the sheet.`);

  /**
   * Iterate serial numbers from the sheet, and lookup each within the serialToSimpleMDMdataMap.
   * Use the simpleMDMdata from the map to populate the DEVICE_ID_NAME, DEVICE_NAME_NAME, and IN_MDM_NAME.
   */
  for (let row = 0; row < sheetSerialNumbers.length; row++) {
    let isInMDM = "Yes";
    let simpleMDMdata = serialToSimpleMDMdataMap.get(sheetSerialNumbers[row]);
    if (simpleMDMdata != undefined) {
      let rowNumber = row + 2; //2 = header + 1 offset.
      sheetData.setValueFor(DEVICE_ID_NAME, rowNumber, simpleMDMdata.deviceId);
      sheetData.setValueFor(DEVICE_NAME_NAME, rowNumber, simpleMDMdata.deviceName);
      let groupNames = getGroupNames(simpleMDMdata.groupIds, groupIdToNameMap);
      sheetData.setValueFor(GROUPS_NAME, rowNumber, groupNames);
    }
    else {
      Logger.log(`${DEVICE_ID_NAME} not found for ${SERIAL_NUMBER_NAME} ${sheetSerialNumbers[row]}`);
      isInMDM = "No";
    }

    sheetData.setValueFor(IN_MDM_NAME, row + 2, isInMDM);
  }

  /**
   * Look for serial numbers in the serialToSimpleMDMdataMap that need to be added to the sheet.
   */
  const sheetSerialSet = new Set(sheetSerialNumbers);
  Logger.log(`${sheetSerialSet.size} unique serial numbers in the sheet.`);

  let totalAdded = 0;
  serialToSimpleMDMdataMap.forEach(mDMdata => {
    if (!sheetSerialSet.has(mDMdata.serialNumber)) {
      mDMdata[IN_MDM_NAME] = "Yes";
      sheetData.addRow(mDMdata);
      totalAdded++;
    }
  });
  SpreadsheetApp.getUi().alert(`${totalAdded} device(s) added to the sheet.`);
}

/**
 * Called when "updateDeviceName" menu item selected.
 * If the current sheet row has a device ID, update SimpleMDM's device name using
 * the row's first and last name values.
 */
function updateDeviceName() {
  const ui = SpreadsheetApp.getUi();
  const sheetData = new SheetData();
  const deviceId = sheetData.getValueOnCurrentRowFor(DEVICE_ID_NAME);
  if (deviceId == null || deviceId == "") {
    ui.alert(`Device ID not found for Serial Number ${sheetData.getValueOnCurrentRowFor(SERIAL_NUMBER_NAME)}`);
  }
  //Skip if on heading row
  else if (deviceId != DEVICE_ID_NAME) {
    const fullName = sheetData.getValueOnCurrentRowFor(FIRST_NAME) + " " + sheetData.getValueOnCurrentRowFor(LAST_NAME);
    const result = patchDeviceName(deviceId, fullName);
    sheetData.setValueFor(DEVICE_NAME_NAME, sheetData.getCurrentRowNumber(), fullName);
    ui.alert(`Update result: ${result}`);
  }
}

/**
 * Set device name to DEFAULT_DEVICE_NAME.
 * Clear out FIRST_NAME, LAST_NAME sheetfields.
 */
function clearDeviceName() {
  const ui = SpreadsheetApp.getUi();
  const sheetData = new SheetData();
  const deviceId = sheetData.getValueOnCurrentRowFor(DEVICE_ID_NAME);
  if (deviceId == null || deviceId == "") {
    ui.alert(`Device ID not found for Serial Number ${sheetData.getValueOnCurrentRowFor(SERIAL_NUMBER_NAME)}`);
  }
  //Skip if on heading row
  else if (deviceId != DEVICE_ID_NAME) {
    const result = patchDeviceName(deviceId, DEFAULT_DEVICE_NAME);
    const currentRowNumber = sheetData.getCurrentRowNumber();
    sheetData.setValueFor(DEVICE_NAME_NAME, currentRowNumber, DEFAULT_DEVICE_NAME);
    sheetData.setValueFor(FIRST_NAME, currentRowNumber, "");
    sheetData.setValueFor(LAST_NAME, currentRowNumber, "");
    ui.alert(`Clear result: ${result}`);
  }
}

/**
 * Called when "updateFirstLastName" menu item selected.
 * If the current sheet row has a device ID, update the row's first and last name values
 * using the DEVICE_NAME_NAME on the same row.
 */
function updateFirstLastName() {
  const ui = SpreadsheetApp.getUi();
  const sheetData = new SheetData();
  const deviceId = sheetData.getValueOnCurrentRowFor(DEVICE_ID_NAME);
  if (deviceId == null || deviceId == "") {
    ui.alert(`Device ID not found for Serial Number ${sheetData.getValueOnCurrentRowFor(SERIAL_NUMBER_NAME)}`);
  }
  //Skip if on heading row
  else if (deviceId != DEVICE_ID_NAME) {
    const deviceName = sheetData.getValueOnCurrentRowFor(DEVICE_NAME_NAME);
    const nameArray = deviceName.split(" ");
    sheetData.setValueFor(FIRST_NAME, sheetData.getCurrentRowNumber(), nameArray[0]);
    sheetData.setValueFor(LAST_NAME, sheetData.getCurrentRowNumber(), nameArray[1]);
  }
}

/**
 * Add the device to ALL_STUDENTS_GROUP, and remove the device from all other groups.
 */
function moveDeviceToAllStudents() {
  const sheetData = new SheetData();
  const deviceId = sheetData.getValueOnCurrentRowFor(DEVICE_ID_NAME);
  if (deviceId == null || deviceId == "") {
    SpreadsheetApp.getUi().alert(`Device ID not found for Serial Number ${sheetData.getValueOnCurrentRowFor(SERIAL_NUMBER_NAME)}`);
  }
  //Skip if on heading row
  else if (deviceId != DEVICE_ID_NAME) {
    const device = retrieveDevice(deviceId);
    if (device != null) {
      const mdmData = new MDMData(device);
      const allStudentGroupId = getAllStudentsGroupId();
      if (allStudentGroupId != null) {
        /**
         * If allStudentGroupId is not already in mdmData.groupIds,
         * add allStudentGroupId to the device, then unassign all other groups
         * from the device.
         * If allStudentGroupId is already assigned, do nothing.
         */
        if (!mdmData.groupIds.includes(allStudentGroupId)) {
          postAssignmentGroup(mdmData.deviceId, allStudentGroupId);

          const nonAllStudentsGroupIds = mdmData.groupIds.filter(groupId => groupId != allStudentGroupId);
          nonAllStudentsGroupIds.forEach(groupId => deleteAssignmentGroup(mdmData.deviceId, groupId));

          //This is a bit risky, as either postAssignmentGroup() or deleteAssignmentGroup()
          //could have failed. An alternative is to re-retrieveDevice();
          sheetData.setValueFor(GROUPS_NAME, sheetData.getCurrentRowNumber(), ALL_STUDENTS_GROUP);
        }
      } //All Students group found
    } //Device found
  } //Not on heading row
}

function openWikiPage() {
  //"What they are, how to use" page
  const url = "https://youneedawiki.com/app/page/1FwrxfoY5EPJIYJ5i_LO1TlhO9CP1QKvUnohunBz5lZY?p=1rR9EQ-OmYh04c-kMsEQ4Bg2irU4NFGiW";
  
  const html = HtmlService.createHtmlOutput(
    `<script>
       window.open("${url}", "_blank");
       google.script.host.close();
     </script>`
  )
  .setWidth(10)
  .setHeight(10);

  SpreadsheetApp.getUi().showModalDialog(html, 'Opening...');
}

/**
 * Add "SimpleMDM" menus to Sheet interface.
 */
function createMenus() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu("SimpleMDM")
    .addItem("Assign device the First and Last name", "updateDeviceName")
    .addItem("Set First and Last name using SimpleMDM device name", "updateFirstLastName")
    .addItem("Clear device and First and Last names", "clearDeviceName")
    .addSeparator()
    .addItem("Move device to All Students group", "moveDeviceToAllStudents")
    .addSeparator()
    .addItem("Update sheet with SimpleMDM data", "populateSimplemMDMdata")
    .addSeparator()
    .addItem("Help", "openWikiPage")
    .addToUi();
}

/**
 * retrieveDevices(), then filter out everything but iPads.
 * @returns Object[]
 */
function retrieveIpads() {
  let devices = retrieveDevices();
  devices = devices.filter(device => {
    return (device.attributes.model_name.startsWith("iPad"));
  });
  return devices;
}

/**
 * Use retrieveItems() to retrieve all devices.
 */
function retrieveDevices() {
  const baseUrl = "https://a.simplemdm.com/api/v1/devices";
  Logger.log("Retrieving devices");
  const devices = retrieveItems(baseUrl);
  return devices;
}

/**
 * Use retrieveItems() to retrieve all groups.
 */
function retrieveGroups() {
  const baseUrl = "https://a.simplemdm.com/api/v1/assignment_groups";
  Logger.log("Retrieving groups");
  const groups = retrieveItems(baseUrl);
  return groups;
}

/**
 * Use SimpleMDM API to retrieve all items per the baseUrl.
 * The API can retrieve a maximum of 100 devices, so it is
 * called repeatedly until has no more devices.
 * @param {string} baseUrl
 * @returns Object[]
 */
function retrieveItems(baseUrl) {
  const RETRIEVAL_LIMIT = 100; //100 is SimpleMDM's max.
  const params = ["limit=" + RETRIEVAL_LIMIT];
  const options = {
    method: "get",
    headers: HTTP_HEADER,
    muteHttpExceptions: false
  };

  baseUrl += ("?" + params.join("&"));

  let items = [];
  let hasMore = true;
  let startingAfter = 0;
  while (hasMore) {
    let url = baseUrl + "&starting_after=" + startingAfter;
    let response = UrlFetchApp.fetch(url, options);
      let content = JSON.parse(response.getContentText());
      Logger.log(`Retrieved ${content.data.length} items (${content.data[0].id}-${content.data[content.data.length - 1].id})`);
      items = items.concat(content.data); //The array of devices are under the name "data".
      hasMore = content.has_more;
      startingAfter = content.data[content.data.length - 1].id; //Get the last retrieved id.
  }

  return items;
}

/**
 * Retrieve a single device
 * @param {number} deviceId 
 * @returns object
 */
function retrieveDevice(deviceId) {
  const options = {
    method: "get",
    headers: HTTP_HEADER,
    muteHttpExceptions: false
  };
  const url = "https://a.simplemdm.com/api/v1/devices/" + deviceId;
  const response = UrlFetchApp.fetch(url, options);
  const content = JSON.parse(response.getContentText());

  if (response.getResponseCode() == 200) {
    Logger.log(`Retrieved serial number ${content.data.attributes.serial_number}`);
    return content.data;
  }
  else {
    Logger.log(`Unable to retrieve deviceId ${deviceId}. HTTP response code ${content.getResponseCode()}`);
    return null;
  }
}

/**
 * Use SimpleMDM API to PATCH the name and device_name using the passed name.
 * @param {number} deviceId 
 * @param {string} name 
 * @returns string containing Success or failure message.
 */
function patchDeviceName(deviceId, name) {
  let returnMessage;

  const params = ["name=" + name, "device_name=" + name];
  const options = {
    method: "patch",
    headers: HTTP_HEADER,
    muteHttpExceptions: false
  };
  const url = "https://a.simplemdm.com/api/v1/devices/" + deviceId + "?" + params.join("&");
  const response = UrlFetchApp.fetch(url, options);

  let content = JSON.parse(response.getContentText());

  if (response.getResponseCode() == 200) {
    returnMessage = "Success";
  }
  else if (content.errors != undefined) {
    returnMessage = content.errors[0].title;
  }

  Logger.log(`Patched serial number ${content?.data?.attributes?.serial_number} name=${content?.data?.attributes?.name}, device name ${content?.data?.attributes?.device_name}. return message: ${returnMessage}`);
  return returnMessage;
}

/**
 * Use SimpleMDM API to add a device to an assignment group.
 * @param {number} deviceId
 * @param {number} assignmentGroupId 
 */
function postAssignmentGroup(deviceId, assignmentGroupId) {
  const options = {
    method: "post",
    headers: HTTP_HEADER,
    muteHttpExceptions: false
  };
  const url = "https://a.simplemdm.com/api/v1/assignment_groups/" + assignmentGroupId + "/devices/" + deviceId;
  const response = UrlFetchApp.fetch(url, options);

  //No content text with this call.
  //let content = JSON.parse(response.getContentText());

  Logger.log(`Posted assignment groupId ${assignmentGroupId} to deviceId ${deviceId}. HTTP response code ${response.getResponseCode()}`);
}

/**
 * Use SimpleMDM API to delete a device from an assignment group.
 * @param {number} deviceId
 * @param {number} assignmentGroupId 
 */
function deleteAssignmentGroup(deviceId, assignmentGroupId) {
  const options = {
    method: "delete",
    headers: HTTP_HEADER,
    muteHttpExceptions: false
  };
  const url = "https://a.simplemdm.com/api/v1/assignment_groups/" + assignmentGroupId + "/devices/" + deviceId;
  const response = UrlFetchApp.fetch(url, options);

  //No content text with this call.
  //let content = JSON.parse(response.getContentText());

  Logger.log(`Deleted assignment groupId ${assignmentGroupId} from deviceId ${deviceId}. HTTP response code ${response.getResponseCode()}`);
}

/**
 * Creates map of serial numbers to MDMDatas.
 * @returns Map
 */
function makeSerialToSimpleMDMdataMap(devices) {
  const map = new Map();

  devices.forEach(device => {
    let serialNumber = device.attributes.serial_number;
    if (map.has(serialNumber)) {
      Logger.log(`Duplicate serial number ${serialNumber} for device id ${device.id}`);
    }
    else {
      map.set(serialNumber, new MDMData(device));
    }
  });

  return map;
}

/**
 * Creates map of group IDs to group names.
 * @return Map
 */
function makeGroupIdToNameMap(groups) {
  const map = new Map();

  groups.forEach(group => {
    map.set(group.id, group.attributes.name);
  });

  return map;
}

/**
 * Convert the passed groupIds into a comma-delimited string of group names.
 * @param {number[]} groupIds 
 * @param {Map} groupIdToNameMap 
 * @returns string
 */
function getGroupNames(groupIds, groupIdToNameMap) {
    const groupNames = groupIds.map(groupId => groupIdToNameMap.get(groupId));
    const groupNameStr = groupNames.join();
    return groupNameStr;
}

/**
 * retrieveGroups(), then iterate through them looking for ALL_STUDENTS_GROUP.
 * Once found, return its groupId.
 * @returns number
 */
function getAllStudentsGroupId() {
    let groupId = null;

    const groups = retrieveGroups();
    for (let i = 0; i < groups.length; i++) {
        if (groups[i].attributes.name == ALL_STUDENTS_GROUP) {
            groupId = groups[i].id;
            break;
        }
    }

    return groupId;
}

/**
 * Exposes data for the Active Sheet.
 */
class SheetData {
  constructor() {
    this.sheet = SpreadsheetApp.getActiveSheet();
    const headingValues = this._getHeadingValues();
    this._headingMap = new Map();
    headingValues.forEach((headingValue, index) => {
      this._headingMap.set(headingValue, index + 1);
    });
    this._totalDataRows = this.sheet.getLastRow() - 1; //Skip heading row.
  }

  /**
   * @returns string[] of headings.
   */
  _getHeadingValues() {
    const headingRange = this.sheet.getRange(1, 1, 1, this.sheet.getLastColumn());
    const headingValues = headingRange.getValues()[0];
    Logger.log(`_getHeadingValues() returning ${headingValues}`);
    return headingValues;
  }

  /**
   * Returns all the row values in the passed columnName.
   * @param {string} Column whose row values we want
   * @returns any[]
   */
  getRowValuesFor(columnName) {
    const columnNumber = this._headingMap.get(columnName);
    const columnRange = this.sheet.getRange(2, columnNumber, this._totalDataRows, 1);
    //columnRange's array is several rows, but one column.
    //values is a 2-dimensional array, indexed by row, then by column.
    const values = columnRange.getValues();
    //We want a single-dimension array of just the row values.
    let rowValues = values.map(value => value[0]);
    //Logger.log(`getRowValuesFor(${columnName}) returning ${rowValues}`);
    return rowValues;
  }

  /**
   * Set the value for cell in columnName, at rowNumber.
   * @param {string} columnName
   * @param {number} rowNumber
   * @param {any} value
   */
  setValueFor(columnName, rowNumber, value) {
    const columnNumber = this._headingMap.get(columnName);
    const cell = this.sheet.getRange(rowNumber, columnNumber, 1, 1);
    //Logger.log(`setValueFor(${columnName},${rowNumber},${value})`);
    cell.setValue(value);
  }

  /**
   * Get the cell value located on the current cell's row and the column of the passed columnName.
   * @param {string} columnName
   * @returns {any} value
   */
  getValueOnCurrentRowFor(columnName) {
    let value = null;
    const currentRange = this.sheet.getCurrentCell();

    if (currentRange != null) {
      const currentRowNum = currentRange.getRow();
      const columnNumber = this._headingMap.get(columnName);
      const cellRange = this.sheet.getRange(currentRowNum, columnNumber, 1, 1);
      value = cellRange.getValue();
    }

    Logger.log(`getValueOnCurrentRowFor(${columnName}) returning ${value}`);
    return value;
  }

  /**
   * Gets the row number of the currently selected cell.
   * @returns {integer}
   */
  getCurrentRowNumber() {
    const currentRange = this.sheet.getCurrentCell();
    return currentRange.getRow();
  }

  /**
   * Create and add a row to the sheet using the passed mDmData.
   * @param {MDMData} mDmData
   */
  addRow(mDmData) {
    //Create an array to be used to populate the new row.
    let columnValues = [];
    //Iterate the keys (the headings). If the heading is found as an mDmData property,
    //push that value to the array. Otherwise, push "".
    this._headingMap.forEach((columnNumber, headingValue) => {
      columnValues.push(mDmData[headingValue] == undefined? "" : mDmData[headingValue]);
    });

    Logger.log(`addRow() adding ${columnValues}`);
    this.sheet.appendRow(columnValues);
  }
}

/**
 * Data we care about for a given SimpleMDM device.
 * Properties are in both dot and [] notation.
 */
class MDMData {
  constructor(device) {
    this.deviceId = device.id;
    this.deviceName = device.attributes.name;
    this.serialNumber = device.attributes.serial_number;
    this[DEVICE_ID_NAME] = this.deviceId;
    this[DEVICE_NAME_NAME] = this.deviceName;
    this[SERIAL_NUMBER_NAME] = this.serialNumber;
    //Array of groupIds assigned to device.
    this.groupIds = device.relationships.groups.data.map(groupData => groupData.id);
  }
}

/**
 * @returns String
 */
function makeHTTPHeader() {
  const apiKey = "EBxI8BgAov9jY4gh60KJzPtU2fVCSanskjS9G4WYQ3219yupy7Yca8ZJENh2Z6x3";
  const authString = Utilities.base64Encode(apiKey + ":");
  const headerObject = {"Authorization": "Basic " + authString};
  return headerObject;
}